.. contents::
   :depth: 3
..

IO库
====

最基本的 IO 库设施包括：

-  ``istream``\ ：输入流类型，提供输入操作。
-  ``ostream``\ ：输出流类型，提供输出操作。
-  ``cin``\ ：\ ``istream``\ 对象，从标准输入读取数据。
-  ``cout``\ ：\ ``ostream``\ 对象，向标准输出写入数据。
-  ``cerr``\ ：\ ``ostream``\ 对象，向标准错误写入数据。
-  ``>>``\ 运算符：从\ ``istream``\ 对象读取输入数据。
-  ``<<``\ 运算符：向\ ``ostream``\ 对象写入输出数据。
-  ``getline``\ 函数：从\ ``istream``\ 对象读取一行数据，写入\ ``string``\ 对象。

IO类
----

``iostream`` 定义基础类型，\ ``fstream``
定义针对文件的输入输出，\ ``sstream`` 定义针对 ``string``
的输入输出。如：

-  ``iostream`` 头文件：\ ``istream``\ 、\ ``wistream``
   从流中读取，\ ``ostream``\ 、\ ``wostream``
   写入流，\ ``iostream``\ 、\ ``wiostream`` 对流进行读写。
-  ``fstream`` 头文件：\ ``ifstream``\ 、\ ``wifstream``
   从文件中读取，\ ``ofstream``\ 、\ ``wofstream``
   写文件，\ ``fstream``\ 、\ ``wfstream`` 对文件进行读写。
-  ``sstream`` 头文件：\ ``istringstream``\ 、\ ``wistringstream``
   从字符串中读取，\ ``ostringstream``\ 、\ ``wostringstream``
   写入到字符串中，\ ``stringstream``\ 、\ ``wstringstream``
   对字符串进行读写。

为了支持宽字符集，标准库定义了处理 ``wchat_t``
数据的类型和对象。宽字符版本通常以 ``w`` 开头，如
``wcin``\ ，\ ``wcout``\ ，\ ``wcerr`` 是
``cin``\ ，\ ``cout``\ ，\ ``cerr`` 的款字符对应对象。

不能拷贝或赋值 IO 对象
~~~~~~~~~~~~~~~~~~~~~~

IO 类型的对象是不可以拷贝或赋值的，函数只能传递或者返回流对象的引用。

读取或写入 IO 对象会改变起状态，所以引用必须不是 ``const`` 的。

条件状态
~~~~~~~~

IO
操作不可避免地会出现错误，有些错误是可以恢复的，如格式错误；有些错误则深入到系统中，并且超出了程序可以修正的范围。IO
类定义函数和标记来访问和修改流的条件状态。

=====================
=======================================================================
状态                  解释
=====================
=======================================================================
``strm:iostate``      是一种机器无关的\ **类型**\ ，提供了表达条件状态的完整功能
``strm:badbit``       用来指出流已经崩溃
``strm:failbit``      用来指出一个IO操作失败了
``strm:eofbit``       用来指出流到达了文件结束
``strm:goodbit``      用来指出流未处于错误状态，此值保证为零
``s.eof()``           若流\ ``s``\ 的\ ``eofbit``\ 置位，则返回\ ``true``
``s.fail()``          若流\ ``s``\ 的\ ``failbit``\ 置位，则返回\ ``true``
``s.bad()``           若流\ ``s``\ 的\ ``badbit``\ 置位，则返回\ ``true``
``s.good()``          若流\ ``s``\ 处于有效状态，则返回\ ``true``
``s.clear()``         将流\ ``s``\ 中所有条件状态位复位，将流的状态设置成有效，返回\ ``void``
``s.clear(flags)``    将流\ ``s``\ 中指定的条件状态位复位，返回\ ``void``
``s.setstate(flags)`` 根据给定的标志位，将流\ ``s``\ 中对应的条件状态位置位，返回\ ``void``
``s.rdstate()``       返回流\ ``s``\ 的当前条件状态，返回值类型为\ ``strm::iostate``
=====================
=======================================================================

-  ``strm::iostate``\ ：\ ``strm`` 是一个 IO 类型，\ ``iostate``
   是一个机器相关的整形类型用于表示 ``stream`` 的条件状态。
-  ``strm::badbit``\ ：常量值，可以赋值给
   ``strm::iostate``\ ，用于表示流被损坏了。
-  ``strm::failbit``\ ：常量值，可以赋值给 ``strm::iostate`` 用于表示 IO
   操作失败了。
-  ``strm::eofbit``\ ：常量值，可以赋值给 ``strm::iostate``
   用于表示流到了 ``end-of-file``\ 。
-  ``strm::goodbit``\ ：常量值，可以赋值给
   ``strm::iostate``\ ，用于表示流没有遇到错误，这个值保证是 0。

-  ``s.eof()``\ ：当流对象的 ``eofbit`` 被设置时返回 ``true``\ 。
-  ``s.fail()``\ ：如果流对象的 ``failbit`` 或 ``badbit`` 被设置时返回
   ``true``\ 。
-  ``s.bad()``\ ：如果流对象的 ``badbit`` 被设置时返回 ``true``\ 。
-  ``s.good()``\ ：如果流对象状态没有任何错误时返回 ``true``\ 。
-  ``s.clear()``\ ：将流对象状态设置为没有错误，返回 ``void``\ 。
-  ``s.clear(flags)``\ ：将流对象的状态设置为 ``flags`` 所表示的值，它是
   ``strm::iostate`` 类型。
-  ``s.setstate(flags)``\ ：在 ``s`` 上添加特定的条件状态
   ``flags``\ ，\ ``flags`` 的类型时\ ``strm::iostate``\ ，返回
   ``void``\ 。
-  ``s.rdstate()``\ ：返回 ``s`` 的当前条件状态，返回类型是
   ``strm::iostate``\ 。

管理输出缓冲
~~~~~~~~~~~~

文件输入输出
------------

string流
--------

.. _section-1:
