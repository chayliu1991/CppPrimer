.. contents::
   :depth: 3
..

操作重载与类型转换
==================

基本概念
--------

-  重载运算符是具有特殊名字的函数：由关键字 ``operator``
   和其后要定义的运算符号共同组成。
-  重载运算符的优先级和结合律跟对应的内置运算符保持一致。
-  调用方式：

   -  ``data1 + data2;``
   -  ``operator+(data1, data2);``

-  只能重载大多数的运算符，而不能发明新的运算符号。
-  可以重载的操作符：

::

   + - * / % ^

   & | ~ ! , =

   < > <= >= ++ --

   << >> == != && ||

   += -= /= %= ^= &=

   |= *= <<= >>= [] ()

   -> ->* new new[] delete delete[]

-  不能重载的操作符：

::

   :: .* . ?:

-  通常，逗号、取地址和逻辑与以及逻辑或操作符不应该被重载。
-  建议只有当操作的含义对于用户来说清晰明了时才使用重载运算符，重载运算符的返回类型也应该与其内置版本的返回类型兼容。
-  如果类中含有算术运算符或位运算符，则最好也提供对应的复合赋值运算符。4
-  当一个重载的运算符是成员函数时，\ ``this``
   绑定到左侧运算对象。动态运算符符函数的参数数量比运算对象的数量少一个。

-  如何选择将运算符定义为成员函数还是普通函数：

   -  赋值（\ ``=``\ ）、下标（\ ``[]``\ ）、调用（\ ``()``\ ）和成员访问箭头（\ ``->``\ ）运算符必须是成员。
   -  复合赋值运算符一般来说是成员。
   -  改变对象状态的运算符或者和给定类型密切相关的运算符通常是成员，如递增、解引用。
   -  具有对称性的运算符如算术、相等性、关系和位运算符等，通常是非成员函数。

输入和输出运算符
----------------

IO 标准库使用 ``>>`` 和 ``<<`` 来表达输入和输出。如果类需要支持 IO
，那么同样需要定义自己的这些操作符的版本。

重载输出运算符
~~~~~~~~~~~~~~

通常情况下，输出运算符：

-  第一个形参是 ``ostream`` 类型的普通引用。
-  第二个形参是要打印类型的常量引用。
-  返回值是它的 ``ostream`` 形参。

::

   ostream & operator<<(ostream &os, const Sales_data &item)
   {
       os << item.isbn() << " " << item.units_sold << " "
          << item.revenue << " " << item.avg_price();
       return os;
   }

注意：

-  输出运算符应该尽量减少格式化操作。
-  输入输出运算符必须是非成员函数。而由于IO操作通常需要读写类的非公有数据，所以输入输出运算符一般被声明为友元。

重载输入运算符
~~~~~~~~~~~~~~

通常情况下，输入运算符：

-  第一个形参是要读取的流的普通引用。
-  第二个形参是要读入的目的对象的普通引用。
-  返回值是它的第一个形参。

::

   istream &operator>>(istream &is, Sales_data &item)
   {
       double price;   
       is >> item.bookNo >> item.units_sold >> price;
       if (is)   
           item.revenue = item.units_sold * price;
       else
           item = Sales_data();    
       return is;
   }

注意：

输入运算符必须处理输入失败的情况，而输出运算符不需要。

以下情况可能导致读取操作失败：

-  读取了错误类型的数据。
-  读取操作到达文件末尾。
-  遇到输入流的其他错误。

当读取操作发生错误时，输入操作符应该负责从错误状态中恢复。

通常输入操作符只能设置 ``failbit``\ 。设置 ``eofbit``
将暗含文件被耗尽，设置 ``badbit`` 将表示流损坏。这些错误最好是留给 IO
库自己去设置。

算术和关系运算符
----------------

-  通常情况下，算术和关系运算符应该定义为非成员函数，以便两侧的运算对象进行转换。

-  由于这些运算符一般不会改变运算对象的状态，所以形参都是常量引用。
-  算术运算符通常会计算它的两个运算对象并得到一个新值，这个值通常存储在一个局部变量内，操作完成后返回该局部变量的副本作为结果（返回类型建议设置为原对象的
   ``const`` 类型）。
-  如果类定义了算术运算符，则通常也会定义对应的复合赋值运算符，此时最有效的方式是使用复合赋值来实现算术运算符。

相等运算符
~~~~~~~~~~

相等运算符设计准则：

-  如果类在逻辑上有相等性的含义，则应该定义 ``operator==``
   而非一个普通的命名函数。这样做便于使用标准库容器和算法，也更容易记忆。
-  通常情况下，\ ``operator==`` 应该具有传递性。
-  如果类定义了\ ``operator==``\ ，则也应该定义 ``operator!=``\ 。
-  ``operator==`` 和 ``operator!=`` 中的一个应该把具体工作委托给另一个。

::

   bool operator==(const Sales_data &lhs, const Sales_data &rhs)
   {
       return lhs.isbn() == rhs.isbn() &&
           lhs.units_sold == rhs.units_sold &&
           lhs.revenue == rhs.revenue;
   }

   bool operator!=(const Sales_data &lhs, const Sales_data &rhs)
   {
       return !(lhs == rhs);
   }

关系运算符
~~~~~~~~~~

定义了相等运算符的类通常也会定义关系运算符。因为关联容器和一些算法要用到小于运算符，所以定义
``operator<`` 会比较实用。

关系运算符设计准则：

-  定义顺序关系，令其与关联容器中对关键字的要求保持一致。
-  如果类定义了 ``operator==``\ ，则关系运算符的定义应该与
   ``operator==``
   保持一致。特别是，如果两个对象是不相等的，那么其中一个对象应该小于另一个对象。
-  只有存在唯一一种逻辑可靠的小于关系时，才应该考虑为类定义
   ``operator<``\ 。

赋值运算符
----------

赋值运算符必须定义为成员函数，复合赋值运算符通常也是如此。这两类运算符都应该返回其左侧运算对象的引用。

::

   StrVec &StrVec::operator=(initializer_list<string> il)
   {
       auto data = alloc_n_copy(il.begin(), il.end());
       free();     
       elements = data.first;    
       first_free = cap = data.second;
       return *this;
   }

   Sales_data& Sales_data::operator+=(const Sales_data &rhs)
   {
       units_sold += rhs.units_sold;
       revenue += rhs.revenue;
       return *this;
   }

下标运算符
----------

下标运算符必须定义为成员函数。

类通常会定义两个版本的下标运算符：一个返回普通引用，另一个是类的常量成员并返回常量引用。

::

   class StrVec
   {
   public:
       std::string& operator[](std::size_t n)
       { return elements[n]; }
       const std::string& operator[](std::size_t n) const
       { return elements[n]; }

   private:
       std::string *elements;  
   }

递增和递减运算符
----------------

定义递增和递减运算符的类应该同时定义前置和后置版本，这些运算符通常定义为成员函数。

为了与内置操作保持一致，前置递增或递减运算符应该返回运算后对象的引用。

::

   StrBlobPtr& StrBlobPtr::operator++()
   {
       ++curr;    
       return *this;
   }

后置递增或递减运算符接受一个额外的（不被使用）\ ``int``
类型形参，该形参的唯一作用就是区分运算符的前置和后置版本。

::

   class StrBlobPtr
   {
   public:
       //@ prefix operators
       StrBlobPtr& operator++();    
       StrBlobPtr& operator--();
       
        //@ postfix operators
       StrBlobPtr operator++(int); 
       StrBlobPtr operator--(int);
   };

为了与内置操作保持一致，后置递增或递减运算符应该返回运算前对象的原值（返回类型建议设置为原对象的\ ``const``
类型）。

::

   StrBlobPtr StrBlobPtr::operator++(int)
   {
       StrBlobPtr ret = *this;    
       ++*this;      
       return ret;   
   }

如果想通过函数调用的方式使用后置递增或递减运算符，则必须为它的整型参数传递一个值。

::

   StrBlobPtr p(a1);   
   p.operator++(0);    
   p.operator++();     

成员访问运算符
--------------

箭头运算符必须定义为成员函数，解引用运算符通常也是如此。

重载的箭头运算符必须返回类的指针或者自定义了箭头运算符的类的对象。

::

   class StrBlobPtr
   {
   public:
       std::string& operator*() const
       {
           return (*p)[curr];   
       }
       std::string* operator->() const
       {   
           return & this->operator*();
       }
   };

对于形如 ``point->mem`` 的表达式来说，\ ``point``
必须是指向类对象的指针或者是一个重载了 ``operator->``
的类的对象。\ ``point`` 类型不同，\ ``point->mem``\ 的含义也不同。

-  如果 ``point`` 是指针，则调用内置箭头运算符，表达式等价于
   ``(*point).mem``\ 。
-  如果 ``point`` 是重载了 ``operator->`` 的类的对象，则使用
   ``point.operator->()`` 的结果来获取 ``mem``\ ，表达式等价于
   ``(point.operator->())->mem``\ 。其中，如果该结果是一个指针，则执行内置操作，否则重复调用当前操作。

函数调用运算符
--------------

函数调用运算符必须定义为成员函数。一个类可以定义多个不同版本的调用运算符，相互之间必须在参数数量或类型上有所区别。

::

   class PrintString
   {
   public:
       PrintString(ostream &o = cout, char c = ' '):
           os(o), sep(c) { }
       void operator()(const string &s) const
       {
           os << s << sep;
       }
       
   private:
       ostream &os;  
       char sep;    
   };

   PrintString printer;  
   printer(s);

如果类定义了调用运算符，则该类的对象被称作函数对象，函数对象常常作为泛型算法的实参。

::

   for_each(vs.begin(), vs.end(), PrintString(cerr, '\n'));  

lambda是函数对象
~~~~~~~~~~~~~~~~

编写一个 ``lambda``
后，编译器会将该表达式转换成一个未命名类的未命名对象，类中含有一个重载的函数调用运算符。

::

   stable_sort(words.begin(), words.end(),
       [](const string &a, const string &b) { return a.size() < b.size(); });

   class ShorterString
   {
   public:
       bool operator()(const string &s1, const string &s2) const
       {
           return s1.size() < s2.size();
       }
   };

``lambda`` 默认不能改变它捕获的变量。因此在默认情况下，由 ``lambda``
产生的类中的函数调用运算符是一个 ``const`` 成员函数。如果 ``lambda``
被声明为可变的，则调用运算符就不再是 ``const`` 函数了。

-  ``lambda`` 通过引用捕获变量时，由程序负责确保 ``lambda``
   执行时该引用所绑定的对象确实存在。因此编译器可以直接使用该引用而无须在
   ``lambda`` 产生的类中将其存储为数据成员。
-  通过值捕获的变量被拷贝到 ``lambda`` 中，此时 ``lambda``
   产生的类必须为每个值捕获的变量建立对应的数据成员，并创建构造函数，用捕获变量的值来初始化数据成员。

::

   auto wc = find_if(words.begin(), words.end(),
               [sz](const string &a) { return a.size() >= sz; });

   class SizeComp
   {
   public:
       SizeComp(size_t n): sz(n) { }   
       bool operator()(const string &s) const
       { 
           return s.size() >= sz; 
       }
       
   private:
       size_t sz;   
   };

``lambda``
产生的类不包含默认构造函数、赋值运算符和默认析构函数，它是否包含默认拷贝/移动构造函数则通常要视捕获的变量类型而定。

标准库定义的函数对象
~~~~~~~~~~~~~~~~~~~~

标准库在头文件 ``<functional>``
中定义了一组表示算术运算符、关系运算符和逻辑运算符的类，每个类分别定义了一个执行命名操作的调用运算符。这些类都被定义为模板的形式，可以为其指定具体的应用类型。

::

   plus<int> intAdd; //@ 可以对两个 int 值做加法的函数对象
   negate<int> intNegate; //@ 可以对一个 int 取反的函数对象
   int sum = intAdd(10, 20); //@ == 30
   sum = intNegate(intAdd(10, 20)); //@ == -30
   sum = intAdd(10, intNegate(10)); //@ == 0

算术运算
^^^^^^^^

-  ``plus<Type>``
-  ``minus<Type>``
-  ``multiplies<Type>``
-  ``divides<Type>``
-  ``modulus<Type>``
-  ``negate<Type>``

关系比较
^^^^^^^^

-  ``equal_to<Type>``
-  ``not_equal_to<Type>``
-  ``greater<Type>``
-  ``greater_equal<Type>``
-  ``less<Type>``
-  ``less_equal<Type>``

逻辑运算
^^^^^^^^

-  ``logical_and<Type>``
-  ``logical_or<Type>``
-  ``logical_not<Type>``

使用标准库函数对象于通用算法
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

   sort(svec.begin(), svec.end(), greater<string>());

比较两个不相关的指针是未定义，然而，我们也许想基于在内存中的地址对一个指针
``vector`` 进行 ``sort``\ ，标准库函数对象就可以做到：

::

   vector<string *> nameTable;

   //@错误：nameTable 中的指针是不相关的，所以 < 是未定义的
   sort(nameTable.begin(), nameTable.end(),
     [](string *a, string *b) { return a < b; });
   //@ 正确：库保证 less 在指针类型上工作良好
   sort(nameTable.begin(), nameTable.end(), less<string*>());

可调用对象与function
~~~~~~~~~~~~~~~~~~~~

C++ 有多种可调用对象：函数和函数指针，\ ``lambda``\ ，由 ``bind``
创建的对象，重载函数调用操作符的类。

不同的类型可以有相同的调用签名
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

   //@函数
   int add(int i, int j) { return i + j; }

   //@ lambda
   auto mod = [](int i, int j) { return i % j; };

   //@ 函数对象类
   struct div {
     int operator()(int denominator, int divisor) {
       return denominator / divisor;
     }
   };

尽管它们的类型不一样，它们的调用签名是一样的：\ ``int(int, int)``\ 。

如果我们将函数表定义为如下：

::

   map<string, int(*)(int, int)> binops;

可以将 ``add`` 以 ``binops.insert({"+", add});``
添加进去，但是我们不能添加 ``mod`` ，因为 ``mod`` 是
``lambda``\ ，然而每个\ ``lambda`` 都有自己的类类型。这与 ``binops``
中的值的类型是不一致。

标准库std::function类型
^^^^^^^^^^^^^^^^^^^^^^^

通过一个定义在 ``functional`` 头文件中的新的标准库类 ``std::function``
来解决此问题；下表列举了定义在 ``function`` 中的操作：

-  ``function<T> f;``\ ： ``f`` 是一个空的 ``function`` 对象，其可以存储
   ``T`` 所表示的调用签名的可调用对象（\ ``T`` 是形如 ``retType(args)``
   的格式）。
-  ``function<T> f(nullptr);`` ：显式构建一个空的 ``function``\ 。
-  ``function<T> f(obj);`` ：存储可调用对象 ``obj`` 的一份拷贝到 ``f``
   中。
-  ``f`` ：将 ``f`` 作为条件使用；如果 ``f`` 中持有一个可调用对象返回
   ``true``\ ，否则返回 ``false``\ 。
-  ``f(args)`` ：传递 ``args`` 去调用 ``f`` 中的对象。

定义为\ ``function<T>``\ 的成员类型
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-  ``result_type`` ：这个 function 类型的可调用对象的返回值类型。
-  ``argument_type``\ 、 ``first_argument_type``
   、\ ``second_argument_type`` ：当 ``T``
   只有一个或两个参数时的参数类型。

   -  如果 ``T`` 只有一个参数，\ ``argument_type`` 就是那个类型。
   -  如果 ``T`` 有两个参数，\ ``first_argument_type`` 和
      ``second_argument_type`` 分别是哪些参数类型。

``function`` 是模板，创建 ``function``
类型对象时我们必须提供额外的信息，在这里是调用签名，例如：

::

   function<int(int, int)>

可以用上面的 ``function`` 类型来表示可调用对象：接收两个 ``int``
参数并返回一个 ``int`` 结果。如：

::

   function<int(int, int)> f1 = add;
   function<int(int, int)> f2 = div();
   function<int(int, int)> f3 = [](int i, int j) { return i*j};

   cout << f1(4, 2) << endl;
   cout << f2(4, 2) << endl;
   cout << f3(4, 2) << endl;

可以按照这个方式重新定义函数表 ``map``\ ：

::

   map<string, function<int(int, int)>> binops = {
     {"+", add}, //@ 函数指针
     {"-", std::minus<int>()}, //@ 库函数对象
     {"/", div()}, //@ 用户定义函数对象
     {"*", [](int i, int j) { return i * j; }}, //@ 匿名 lambda
     {"%", mod} //@ 具名 lambda
   };

重载的函数和function
^^^^^^^^^^^^^^^^^^^^

不能直接将一个重载的函数的名字存储到 ``function`` 类型的对象中：

::

   int add(int i, int j) { return i + j; }
   Sales_data add(const Sales_data &, const Sales_data &);
   map<string, function<int(int, int)>> binops;
   binops.insert({"+", add});   //@ 错误：哪一个 add？ 

一种解决这种二义性的方式是存储函数指针而不是函数的名字：

::

   int(*fp)(int, int) = add;
   binops.insert({"+", fp});

或者使用 ``lambda`` 包装一下：

::

   binops.insert({"+", [](int a, int b){return add(a, b);}});

C++11 新标准库中的 ``function`` 类与旧版本中的 ``unary_function`` 和
``binary_function`` 没有关系，后两个类已经被 ``bind`` 函数代替。

重载、类型转换与运算符
----------------------

转换构造函数和类型转换运算符共同定义了类类型转换。

类型转换运算符
~~~~~~~~~~~~~~

类型转换运算符是类的一种特殊成员函数，负责将一个类类型的值转换成其他类型。它不能声明返回类型，形参列表也必须为空，一般形式如下：

::

   operator type() const;

类型转换运算符可以面向除了 ``void``
以外的任意类型（该类型要能作为函数的返回类型）进行定义。

::

   class SmallInt
   {
   public:
       SmallInt(int i = 0): val(i)
       {
           if (i < 0 || i > 255)
               throw std::out_of_range("Bad SmallInt value");
       }   
       operator int() const { return val; }
       
   private:
       std::size_t val;
   };

隐式的用户定义类型转换可以置于一个标准（内置）类型转换之前或之后，并与其一起使用。

::

   SmallInt si = 3.14;     //@ calls the SmallInt(int) constructor
   si + 3.14;     //@ that int is converted to double using the built-in conversion

应该避免过度使用类型转换函数。如果在类类型和转换类型之间不存在明显的映射关系，则这样的类型转换可能具有误导性。

C++11
引入了显示的类型转换运算符。和显式构造函数一样，编译器通常不会将显式类型转换运算符用于隐式类型转换。

::

   class SmallInt
   {
   public:
       explicit operator int() const { return val; }
       //@ other members as before
   };

   SmallInt si = 3;   
   si + 3;     //@ 错误，不允许隐式转换
   static_cast<int>(si) + 3;    //@ 正确，显示转换

如果转换操作符是 ``explicit``
的，我们依然可以做转换。然而，除了一个例外之外，我们必须使用 ``cast``
进行显式转换。

这个例外是编译器会将 ``explicit`` 转换用在条件中，如下：

-  ``if``\ 、\ ``while``\ 、\ ``do-while``\ 语句的条件部分。
-  ``for``\ 语句头的条件表达式。
-  条件运算符 ``? :`` 的条件表达式。
-  逻辑非运算符 ``!``\ 、逻辑或运算符 ``||``\ 、逻辑与运算符 ``&&``
   的运算对象。

类类型向 ``bool`` 的类型转换通常用在条件部分，因此 ``operator bool``
一般被定义为显式的。

避免二义性的类型转换
~~~~~~~~~~~~~~~~~~~~

在两种情况下可能产生多重转换路径：

-  ``A`` 类定义了一个接受 ``B`` 类对象的转换构造函数，同时 ``B``
   类定义了一个转换目标是 ``A`` 类的类型转换运算符。

::

   struct B;
   struct A
   {
       A() = default;
       A(const B&); //@ converts a B to an A
       //@ other members
   };

   struct B
   {
       operator A() const; //@ also converts a B to an A
       //@ other members
   };

   A f(const A&);
   B b;

   //@ 二义性错误：f(B::operator A())，f(A::A(const B&))
   A a = f(b);    

-  类定义了多个类型转换规则，而这些转换涉及的类型本身可以通过其他类型转换联系在一起。

::

   struct A
   {
       A(int = 0);     
       A(double);    
       operator int() const;       
       operator double() const;  
       //@ other members
   };

   void f2(long double);
   A a;
   //@ 二义性错误：f(A::operator int()),f(A::operator double())
   f2(a);    

   //@ 二义性错误：f(A::operator int()),f(A::operator double())
   long lg;
   A a2(lg);   

可以通过显式调用类型转换运算符或转换构造函数解决二义性问题，但不能使用强制类型转换，因为强制类型转换本身也存在二义性。

::

   A a1 = f(b.operator A());    //@ 正确，使用 B's conversion operator
   A a2 = f(A(b));     //@ 正确，调用 A's constructor

注意：

-  通常情况下，不要为类定义相同的类型转换，也不要在类中定义两个及两个以上转换源或转换目标都是算术类型的转换。
-  使用两个用户定义的类型转换时，如果转换前后存在标准类型转换，则由标准类型转换决定最佳匹配。
-  如果在调用重载函数时需要使用构造函数或者强制类型转换来改变实参的类型，通常意味着程序设计存在不足。
-  调用重载函数时，如果需要额外的标准类型转换，则该转换只有在所有可行函数都请求同一个用户定义类型转换时才有用。如果所需的用户定义类型转换不止一个，即使其中一个调用能精确匹配而另一个调用需要额外的标准类型转换，也会产生二义性错误。

::

   struct C
   {
       C(int);
       //@ other members
   };

   struct E
   {
       E(double);
       //@ other members
   };

   void manip2(const C&);
   void manip2(const E&);

   //@ 错误，二义性错误：manip2(C(10) ， manip2(E(double(10)))
   manip2(10);  

函数匹配与重载运算符
~~~~~~~~~~~~~~~~~~~~

表达式中运算符的候选函数集既包括成员函数，也包括非成员函数。表达式
``a sym b`` 可能是：

::

   class SmallInt
   {
       friend SmallInt operator+(const SmallInt&, const SmallInt&);
       
   public:
       SmallInt(int = 0);   
       operator int() const { return val; }   
       
   private:
       std::size_t val;
   };

   SmallInt s1, s2;
   SmallInt s3 = s1 + s2;    //@ 使用重载 operator+
   int i = s3 + 0;    //@ 错误：二义性

第二个加法之所以是模糊的，原因在于我们可以将 0 转为 ``SmallInt``
然后使用\ ``SmallInt`` 的 ``operator+`` 做运算，或者将 ``s3`` 转为
``int`` 然后使用内置加法；

为同一个类同时提供转换到算术类型的转换函数和重载操作符可能会在重载操作符和内置操作符之间导致二义性。
